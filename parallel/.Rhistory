paste(name$Var1,name$Var2,sep='')
z<-paste(name$Var1,name$Var2,sep='')
f2<-paste(name$Var1,name$Var2,sep='')
table(f2)
f2 <-paste(sort(unlist(strsplit(f2,""))),collapse = "")
table(f2)
f2
f2<-paste(name$Var1,name$Var2,sep='')
f2
f2 <-sapply(f2,paste(sort(unlist(strsplit(x,""))),collapse = ""))
name = expand.grid(x,y)
f2<-paste(name$Var1,name$Var2,sep='')
f2 <-sapply(f2,paste(sort(unlist(strsplit(x,""))),collapse = ""))
f2<-paste(name$Var1,name$Var2,sep='')
f2 <-sapply(f2,function(x) paste(sort(unlist(strsplit(x,""))),collapse = ""))
table(f2)
contributors()
x <- c('ABC','ABc','abC','abc')
y <- c('ABC','ABc','abC','abc')
name = expand.grid(x,y)
name
f2<-paste(name$Var1,name$Var2,sep='')
f2
table(f2)
f2 <-sapply(f2,function(x) paste(sort(unlist(strsplit(x,""))),collapse = ""))
f2
table(f2)
x <- c('ABC','ABc','abC','abc')
y <- c('ABC','ABc','abC','abc')
name = expand.grid(x,y)
f2<-paste(name$Var1,name$Var2,sep='')
f2 <-sapply(f2,function(x) paste(sort(unlist(strsplit(x,""))),collapse = ""))
table(f2)
2^16
2^32
2^32-1
2^31 -1
2^31 -1 < 10000000007
f <- function(x){
x^2 + 1
}
f(3)
f(5)
x <- seq(0,10,0.01)
x
f(x)
plot(x,y)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.0001)
x
y <- f(x)
plot(x,y)
x =3
f(x)
f(-x)
f(9)
f(-9)
?plot
x <- seq(-10,10,0.0001,lty=3)
y <- f(x)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y,,lty=3)
plot(x,y,lty=3)
plot(x,y,lty=2)
plot(x,y,lty='2')
plot(x,y)
f(100)
x <- seq(0,10,0.01)
y <- f(x)
plot(x,y)
f <- function(x){
if(x== - 3)
return x
-x
}
x <- seq(0,10,0.01)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y)
plot(x,y,type='p')
x <- seq(-10,10,0.1)
y <- f(x)
plot(x,y,type='p')
f <- function(x){
if(x== - 3)
return -x
x
}
x <- seq(-10,10,0.1)
y <- f(x)
y
plot(x,y,type='p')
f <- function(x){
if(x== - 3)
return -x;
else
return x;
}
f <- function(x){
if(x== - 3)
return -x
else
return x
}
f <- function(x){
if(x== - 3)
-x
else
x
}
x <- seq(-10,10,0.1)
y <- f(x)
x <- seq(-10,10,0.1)
y <- f(x)
f <- function(x){
-x
}
f(3)
f(5)
x <- seq(-10,10,0.1)
y <- f(x)
plot(x,y,type='p')
f(100)
f(-100)
library('tidyverse')
x<-c(4,4,4,8,4)
plot(x)
lines(x)
plot(x,ylim = c(0,16))
lines(x,)
y<-c(4,8,8,8,4,)
y<-c(4,8,8,8,4)
plot(y)
lines(y)
plot(y,ylim(0,10))
lines(y)
plot(y,ylim=c(0,10))
lines(y)
ggplot(data=x)
data =data.frame(i=1:5,x=x)
ggplot(data) + geom_point(aes(i,x))
ggplot(data) + geom_point(aes(i,x)) + geom_line()
ggplot(data,aes(i,x))) + geom_point() + geom_line()
ggplot(data) + geom_point(aes(i,x)) + geom_line(aes(i,x))
data =data.frame(i=1:5,x=y)
ggplot(data) + geom_point(aes(i,x)) + geom_line(aes(i,x))
sample(1:10,1)
abs(-10)
?lappy
?lapply
?system.time
?top
## Example
## Bootstrap distribution of regression slope parameter
plot(mpg ~ disp, mtcars)
N <- 20
betas <- numeric(N)
nrow <- nrow(mtcars)
for (i in 1:N) {
resample <- sample(1:nrow, nrow, replace=TRUE)
fit <- lm(mpg ~ disp, mtcars[resample, ])
coef <- coef(fit)
abline(coef, col=rgb(0,0,0,.02))
betas[i] <- coef[2]
}
betas
plot(density(betas))
## Larger example (without the plotting)
N <- 2000
betas <- numeric(N)
nrow <- nrow(mtcars)
for (i in 1:N) {
resample <- sample(1:nrow, nrow, replace=TRUE)
fit <- lm(mpg ~ disp, mtcars[resample, ])
coef <- coef(fit)
betas[i] <- coef[2]
}
length(betas)
head(betas)
# Same code as function
myboot <- function(N=2000) {
betas <- numeric(N)
nrow <- nrow(mtcars)
for (i in 1:N) {
resample <- sample(1:nrow, nrow, replace=TRUE)
betas[i] <- lm(mpg ~ disp, mtcars[resample, ])$coef[2]
}
betas
}
betas <- myboot()
length(betas)
head(betas)
## Same code in .R file
source("boot.R")
setwd("~/canvas/stats769/parallel")
## Same code in .R file
source("boot.R")
length(betas)
head(betas)
## Same code with separate worker
# - how do I get 'betas' back from the worker ?
system("Rscript boot.R", ignore.stdout=TRUE)
# Why doesn't this work ?
# ... because the worker R session does not know about myboot()
# - how do I get information to the worker ?
system("Rscript -e 'betas <- myboot()'")
###########
## Timings
system.time(source("boot.R"))
## Repeat 3 times (in series)
system.time({
source("boot.R")
source("boot.R")
source("boot.R")
})
?source
## Repeat 3 times with 3 workers (in series)
system.time({
system("Rscript boot.R", ignore.stdout=TRUE)
system("Rscript boot.R", ignore.stdout=TRUE)
system("Rscript boot.R", ignore.stdout=TRUE)
})
## Repeat 3 times with 3 workers (in series)
system.time({
system("Rscript boot.R", ignore.stdout=TRUE)
system("Rscript boot.R", ignore.stdout=TRUE)
system("Rscript boot.R", ignore.stdout=TRUE)
})
## Repeat 3 times (in series)
system.time({
source("boot.R")
source("boot.R")
source("boot.R")
})
# Manual parallel processing (3 worker R sessions)
# Three times the work done in the same amount of time
# (because each R session gets run by the OS on different CPU core)
# - how do I know when they have all finished ?
system.time({
system("Rscript boot.R", ignore.stdout=TRUE, wait=FALSE)
system("Rscript boot.R", ignore.stdout=TRUE, wait=FALSE)
system("Rscript boot.R", ignore.stdout=TRUE, wait=FALSE)
})
# Use multiple cores via mclapply()
library(parallel)
# How many cores do I have ?
numCores <- detectCores()
numCores
timer <- function(x) Sys.sleep(.5)
# Serial
system.time(
lapply(1:10, timer)
)
# Parallel (on Linux)
# NOTE the effect of num calls versus num cores
system.time(
mclapply(1:10, timer, mc.cores=4)
)
system.time(
mclapply(1:5, timer, mc.cores=4)
)
# Back to the bootstrap example
system.time({
threeBoots <- mclapply(1:3, function(i) { source("boot.R"); betas },
mc.cores=3)
})
View(threeBoots)
threeBoots <- mclapply(1:3, function(i) { source("boot.R"); betas },
mc.cores=16)
# Back to the bootstrap example
system.time({
threeBoots <- mclapply(1:3, function(i) { source("boot.R"); betas },
mc.cores=16)
})
# Back to the bootstrap example
system.time({
threeBoots <- mclapply(1:3, function(i) { source("boot.R"); betas },
mc.cores=2)
})
# Back to the bootstrap example
system.time({
threeBoots <- mclapply(1:3, function(i) { source("boot.R"); betas },
mc.cores=1)
})
# Back to the bootstrap example
system.time({
threeBoots <- mclapply(1:3, function(i) { source("boot.R"); betas },
mc.cores=3)
})
# The result is a list
class(threeBoots)
length(threeBoots)
head(threeBoots[[1]])
# Using the function ALSO works because we pass the function object
# as an argument to mclapply()
threeBoots <- mclapply(rep(2000, 3), myboot, mc.cores=3)
head(threeBoots[[1]])
# AND the following also works ...
threeBoots <- mclapply(1:3, function(i) myboot(), mc.cores=3)
head(threeBoots[[1]])
# Use multiple cores via makeCluster()
# NOTE the startup time for makeCluster() getting 'numCores' R sessions started
cl <- makeCluster(4)
system.time(
parLapply(cl, 1:10, timer)
)
system.time(
parLapply(cl, 1:5, timer)
)
stopCluster(cl)
# Back to the bootstrap example
system.time({
## NOTE the overhead of starting up several new R sessions
cl <- makeCluster(3)
threeBoots <- parLapply(cl, 1:3, function(i) { source("boot.R"); betas })
## (almost) NONE of the work is done in THIS R session
})
head(threeBoots[[1]])
# Using the function works because we pass the function object
# as an argument to parLapply()
# NOTE that we can reuse the cluster
threeBoots <- parLapply(cl, rep(2000, 3), myboot)
head(threeBoots[[1]])
# BUT the following does NOT work ...
# ... because the worker R sessions are independent and communicating via
# sockets, so they do not know about myboot()
threeBoots <- parLapply(cl, 1:3, function(i) myboot())
# BUT we can make it work by sending the myboot() function to the worker
# R sessions.
clusterExport(cl, "myboot")
threeBoots <- parLapply(cl, 1:3, function(i) myboot())
head(threeBoots[[1]])
# Clean up
stopCluster(cl)
# Demonstration of parallel code running SLOWER
# Run on my PC
# Serial
system.time(oneBoot <- myboot(6000))
# Good parallel
system.time({
cl <- makeCluster(3)
threeBoots <- parLapply(cl, rep(2000, 3), myboot)
stopCluster(cl)
})
# Bad parallel
system.time({
cl <- makeCluster(100)
hundredBoots <- parLapply(cl, rep(30, 100), myboot)
stopCluster(cl)
})
library(parallel)
cl <- makeCluster(c(rep("localhost", 2),
rep("137.184.3.5", 2)),
master="143.198.73.203",
user="root",
homogeneous=FALSE,
Rscript="/usr/bin/Rscript")
cl <- makeCluster(c(rep("localhost", 2),
rep("137.184.3.5", 2)),
master="143.198.73.203",
user="root",
homogeneous=FALSE,
Rscript="/usr/bin/Rscript")
threeBoots <- parLapply(cl, 1:3, function(i) source("boot.R"))
head(threeBoots[[1]]$value)
stopCluster(cl)
knitr::opts_chunk$set(echo = TRUE)
list.files(".")
list.files(".","A")
fnames <- list.files(path,"^{0-9}")
files="AugustTraffic.csv"
rbind(lapply(files,readFile))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
readFile <- function(filename) {
countsDT <- fread(filename)
countsDT[, day := substr(startDatetime, 1, 11)][, .(count = sum(count)), .(day, siteRef, class)]
}
rbind(lapply(files,readFile))
system("[wd")
system("pwd")
file = paste("/Users/fangzeyuan/canvas/stats769/lab5",file)
file = paste("/Users/fangzeyuan/canvas/stats769/lab5",file)
file
files = paste("/Users/fangzeyuan/canvas/stats769/lab5",files)
files
files = "/Users/fangzeyuan/canvas/stats769/lab5/AugustTraffic.csv"
files
rbind(lapply(files,readFile))
rbind(sapply(files,readFile))
readFile(files)
rbind
?rbind
do.call
?do.call
do.call(rbind,lapply(files,readFile))
knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(parallel)
?list.files
path= "/course/NZTA"
files <- list.files(path,"^{0-9}",full.names = T)
head(files)
path="/Users/fangzeyuan/canvas/stats769/lab5 "
path="/Users/fangzeyuan/canvas/stats769/lab5"
files <- list.files(path,"^{0-9}",full.names = T)
head(files)
files
files <- list.files(path,"^{0-9}",full.names = F)
files <- list.files(path,"/^{0-9}",full.names = F)
head(files)
files <- list.files(path,"//^{0-9}",full.names = F)
head(files)
files <- list.files(path,"/^{0,9}",full.names = F)
head(files)
files <- list.files(path,"/^\d",full.names = F)
files <- list.files(path,"/^/d",full.names = F)
head(files)
files <- list.files(path,"^/d",full.names = F)
head(files)
files <- list.files(path,"/^/d",full.names = F)
files <- list.files(path,"^/d",full.names = F)
head(files)
files <- list.files(path,"^d",full.names = F)
head(files)
path= "/course/NZTA"
files <- list.files(path,"^d",full.names = F)
head(files)
files <- list.files(path,pattern = "^d",full.names = F)
head(files)
files <- list.files(path,pattern = "",full.names = F)
head(files)
files <- list.files(path,pattern = "a",full.names = F)
head(files)
path
path= "/Users/fangzeyuan/canvas/stats769/lab5"
#path= "/course/NZTA"
files <- list.files(path,pattern = "a",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^/d",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "^/d",full.names = F)
head(files)
path
#path= "/course/NZTA"
files <- list.files(path,pattern = "6",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^/d",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^[0-9].",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^[0-9]*",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^/d*",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^//User",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "/^/User",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "canvas",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "6",full.names = F)
head(files)
#path= "/course/NZTA"
files <- list.files(path,pattern = "canvas",full.names = T)
head(files)
#path= "/course/NZTA"
files <- list.files(path,full.names = T)
files
#path= "/course/NZTA"
files <- list.files(path,full.names = F)
grep("/^[0-9]",files)
grep("/^/d",files)
grep("/d",files)
grep("\d",files)
grep("//d",files)
files
?grep
grep("d",files)
files
grep("[a-z]",files)
grep("\^[a-z]",files)
grep("/^[a-z]",files)
grep("//^[a-z]",files)
grep("\\^[a-z]",files)
grep("^[a-z]",files)
grep("^[0-9]",files)
path= "/Users/fangzeyuan/canvas/stats769/lab5"
#path= "/course/NZTA"
files <- list.files(path,"^[0-9]",full.names = F)
head(files)
path= "/Users/fangzeyuan/canvas/stats769/lab5"
#path= "/course/NZTA"
files <- list.files(path,"^[0-9]",full.names = T)
head(files)
