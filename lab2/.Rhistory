summary(kyphosis)
set.seed(784); library("rpart")
z.kyph <- rpart(Kyphosis ~ Age + Number + Start, data = kyphosis)
print(z.kyph)
sumamry(z.kyph)
summary(z.kyph)
z.kyph
0.76731 + 0.0077009
## 6
library(rpart)
sdata <- read.csv('sdata.csv')
predict(rpart(age ~ sbp + smokenow + pulse,
data = na.omit(sdata), cp = Inf))[1]
mytree <- rpart(age ~ sbp + smokenow + pulse,
data = na.omit(sdata), cp = Inf)
printcp(mytree)
n2 <- 198 + 7
n1 <- 3521+135
n2 <- 198 + 7
n <- n1+ n2
-2(n1*log2(n1/n)+n2*log(n2/n))
-2*(n1*log2(n1/n)+n2*log(n2/n))
-2*(n1*log2(n1/n)+n2*log2(n2/n))
-2*(n1*log(n1/n)+n2*log(n2/n))
-2*(n1*log2(n1/n)+n2*log2(n2/n))
-2*(n1*log10(n1/n)+n2*log10(n2/n))
-2*(n1*log(n1/n)+n2*log(n2/n))
?log
-2*(n1*log(n1/n)+n2*log(n2/n))
-2*n1*log(n1/n) -2*n2*log(n2/n))
-2*n1*log(n1/n) -2*n2*log(n2/n)
(0.99343 - 1)/0.01739
t =  (0.99343 - 1)/0.01739
?qt
2*(1 - dt(t,38))
2*(1 - dt(abs(t),38))
t
abs(t)
2*(1 - pt(abs(t),38))
2*(1 - pt(t),38))
2*(1 - pt(t),38)
t =  (0.99343 - 1)/0.01739
2*(1 - pt(t,38)
t =  (0.99343 - 1)/0.01739
2*(1 - pt(t,38)
2*(1 - pt(t,38))
t =  (0.99343 - 1)/0.01739
2*(1 - pt(t,38))
2*(1 - pt(abs(t),38))
pnorm(1)
dnorm(1)
dnorm(2)
pnorm(2)
t
t =  (0.99343 )/0.01739
2*(1 - pt(abs(t),38))
t =  (0.99343 )/0.01739
(1 - pt(abs(t),38))
t
?simulate
225*0.16 +
225*0.16
225*0.16 +97 *(0.3093+0.29897) + 106*0.39623 + 204*(0.39706+0.02451) + 472*(1-0.86409)
225*0.16 +97 *(0.3093+0.29897) + 106*0.39623 + 204*(0.39706+0.02451) + 3473*(1-0.86409)
225*0.16 +97 *(0.03093+0.29897) + 106*0.39623 + 204*(0.39706+0.02451) + 3473*(1-0.86409)
879*0.00536+3473*0.00633
4105*0.00536
p =0.60377
2*106*p*(1-p)
81*0.209877
36+32+106*0.39623+86+472
106*0.39623
106*0.39623
204*ï¼ˆ0.02451+0.39706)
204*(0.02451+0.39706)
106*0.39623
log10(2) + log10(5)
?zero\
library(VLAM)
library(VGAM)
TypicalVGAMfamilyFunction
??TypicalVGAMfamilyFunction
0.7*0.05/(0.7*0.05+0.05*0.95)
12.2206+1.4749*4.5
12.2206+1.4749*3
#2
D =3
lambda =2.7596
mu = 12.2206+ 1.4749*D
sigma = exp(-2.6814)
qnorm(0,5)
qnorm(0.5)
log(1,base=lambda)
mu = 12.2206+ 1.4749*D
lambda =2.7596
mu = 12.2206+ 1.4749*D
mu
sigma = exp(-2.6814)
#2
D =3
lambda =2.7596
mu = 12.2206+ 1.4749*D
mu
sigma = exp(-2.6814)
sigma
0.7*0.05/(0.7*0.05+0.05*0.95)
0.7 * 0.05/(0.7 * 0.05 + 0.05 * 0.95)
36+21+131+179
21.40/0.01281
20.45/0.08687
4^3
64*3
5*3
5^3
125*3
x <- c('ABC','ABc','abC','abc')
y <- c('ABC','ABc','abC','abc')
expand.grid(x,y)
name = expand.grid(x,y)
paste(name$Var1,name$Var2)
paste(name$Var1,name$Var2,'')
?paste
paste(name$Var1,name$Var2,sep='')
paste(name$Var1,name$Var2,sep='')
z<-paste(name$Var1,name$Var2,sep='')
f2<-paste(name$Var1,name$Var2,sep='')
table(f2)
f2 <-paste(sort(unlist(strsplit(f2,""))),collapse = "")
table(f2)
f2
f2<-paste(name$Var1,name$Var2,sep='')
f2
f2 <-sapply(f2,paste(sort(unlist(strsplit(x,""))),collapse = ""))
name = expand.grid(x,y)
f2<-paste(name$Var1,name$Var2,sep='')
f2 <-sapply(f2,paste(sort(unlist(strsplit(x,""))),collapse = ""))
f2<-paste(name$Var1,name$Var2,sep='')
f2 <-sapply(f2,function(x) paste(sort(unlist(strsplit(x,""))),collapse = ""))
table(f2)
contributors()
x <- c('ABC','ABc','abC','abc')
y <- c('ABC','ABc','abC','abc')
name = expand.grid(x,y)
name
f2<-paste(name$Var1,name$Var2,sep='')
f2
table(f2)
f2 <-sapply(f2,function(x) paste(sort(unlist(strsplit(x,""))),collapse = ""))
f2
table(f2)
x <- c('ABC','ABc','abC','abc')
y <- c('ABC','ABc','abC','abc')
name = expand.grid(x,y)
f2<-paste(name$Var1,name$Var2,sep='')
f2 <-sapply(f2,function(x) paste(sort(unlist(strsplit(x,""))),collapse = ""))
table(f2)
2^16
2^32
2^32-1
2^31 -1
2^31 -1 < 10000000007
f <- function(x){
x^2 + 1
}
f(3)
f(5)
x <- seq(0,10,0.01)
x
f(x)
plot(x,y)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.0001)
x
y <- f(x)
plot(x,y)
x =3
f(x)
f(-x)
f(9)
f(-9)
?plot
x <- seq(-10,10,0.0001,lty=3)
y <- f(x)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y,,lty=3)
plot(x,y,lty=3)
plot(x,y,lty=2)
plot(x,y,lty='2')
plot(x,y)
f(100)
x <- seq(0,10,0.01)
y <- f(x)
plot(x,y)
f <- function(x){
if(x== - 3)
return x
-x
}
x <- seq(0,10,0.01)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y)
plot(x,y,type='p')
x <- seq(-10,10,0.1)
y <- f(x)
plot(x,y,type='p')
f <- function(x){
if(x== - 3)
return -x
x
}
x <- seq(-10,10,0.1)
y <- f(x)
y
plot(x,y,type='p')
f <- function(x){
if(x== - 3)
return -x;
else
return x;
}
f <- function(x){
if(x== - 3)
return -x
else
return x
}
f <- function(x){
if(x== - 3)
-x
else
x
}
x <- seq(-10,10,0.1)
y <- f(x)
x <- seq(-10,10,0.1)
y <- f(x)
f <- function(x){
-x
}
f(3)
f(5)
x <- seq(-10,10,0.1)
y <- f(x)
plot(x,y,type='p')
f(100)
f(-100)
library('tidyverse')
x<-c(4,4,4,8,4)
plot(x)
lines(x)
plot(x,ylim = c(0,16))
lines(x,)
y<-c(4,8,8,8,4,)
y<-c(4,8,8,8,4)
plot(y)
lines(y)
plot(y,ylim(0,10))
lines(y)
plot(y,ylim=c(0,10))
lines(y)
ggplot(data=x)
data =data.frame(i=1:5,x=x)
ggplot(data) + geom_point(aes(i,x))
ggplot(data) + geom_point(aes(i,x)) + geom_line()
ggplot(data,aes(i,x))) + geom_point() + geom_line()
ggplot(data) + geom_point(aes(i,x)) + geom_line(aes(i,x))
data =data.frame(i=1:5,x=y)
ggplot(data) + geom_point(aes(i,x)) + geom_line(aes(i,x))
knitr::opts_chunk$set(echo = TRUE)
library(jsonlite)
jsonResult <- fromJSON('traffic-daily-counts.json')
setwd("~/canvas/stats769/lab2")
library(jsonlite)
jsonResult <- fromJSON('traffic-daily-counts.json')
DailyCnt2 <- jsonResult$features$attributes
DailyCnt2$startDate <- as.Date(as.POSIXlt(DailyCnt2$startDate/1e3, origin="1970-01-01"))
head(DailyCnt2)
density(DailyCnt2$trafficCount)
cnt <- density(DailyCnt2$trafficCount)
plot(cnt)
cnt <- density(DailyCnt2$trafficCount)
plot(cnt,labx='Counts',laby='Frequency',main = "Counts distribution")
plot(cnt,xlab='Counts',ylab='Frequency',main = "Counts distribution")
head(sqrt(DailyCnt2$trafficCount))
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
index
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit <- lm(scount ~ class, train)
DailyCnt2$scount <- sqrt(DailyCnt2$trafficCount)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit <- lm(scount ~ class, train)
DailyCnt2
head(DailyCnt2)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit <- lm(scount ~ classWeight, train)
predLM <- predict(lmfit, test)
predLM
RMSE(obs, predMean)
RMSE(obs, predLM)
head(DailyCnt2)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
#predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ classWeight, train)
lmfit2 <- lm(scount ~ classWeight+ SiteRef, train)
predLM1 <- predict(lmfit, test1)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
#predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ classWeight, train)
lmfit2 <- lm(scount ~ classWeight+ SiteRef, train)
predLM1 <- predict(lmfit1, test)
predLM2 <- predict(lmfit1, test)
RMSE(obs, predLM1)
RMSE(obs, predLM2)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
#predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ classWeight, train)
lmfit2 <- lm(scount ~ classWeight+ SiteRef, train)
predLM1 <- predict(lmfit1, test)
predLM2 <- predict(lmfit2, test)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
#predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ classWeight, train)
predLM1 <- predict(lmfit1, test)
plot(scount ~ jitter(as.numeric(factor(class))), test,
xlab="class", axes=FALSE)
plot(scount ~ jitter(as.numeric(factor(classWeight))), test,
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$class))),
predict(lmfit, data.frame(class=unique(factor(test$class)))),
pch=16, col="red")
plot(scount ~ jitter(as.numeric(factor(classWeight))), test,
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$classWeight))),
predict(lmfit, data.frame(class=unique(factor(test$classWeight)))),
pch=16, col="red")
plot(scount ~ jitter(as.numeric(factor(classWeight))), test,
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$classWeight))),
predict(lmfit1, data.frame(class=unique(factor(test$classWeight)))),
pch=16, col="red")
plot(scount ~ jitter(as.numeric(factor(classWeight))), test,
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$classWeight))),
predict(lmfit1, data.frame(classWeight=unique(factor(test$classWeight)))),
pch=16, col="red")
predLM1
length(unique(predLM1))
?beta
beta(3,55)
beta <- seq(3,55,1)
beta
dupd <- rep(1/length(beta),length(beta))
dupd
sum(beta*dupd)
mu =<- sum(beta*dupd)
(beta-mu)^2 * dupd
mu <- sum(beta*dupd)
(beta-mu)^2 * dupd
var <- sum((beta-mu)^2 * dupd)
var
sigma <- sum((beta-mu)^2 * dupd)
mu
sigma
logunif <- 1/beta
logunif
sum(logunif)
logunif <- logunif/sum(logunif)
logunif
sum(logunif)
logunif <- rep(1/beta)
logunif
ï¼Ÿrep
?rep
rep(5,10)
rep(1/beta,5)
logunif <- 1/beta
logunif <- logunif/sum(logunif)
logunif
1e3
length(unique(DailyCnt2$siteID))
cnt <- density(DailyCnt2$trafficCount)
plot(cnt,xlab='Counts',ylab='Frequency',main = "Counts distribution")
cnt
summary(cnt)
DailyCnt2$trafficCount
table(DailyCnt2$trafficCount)
max(table(DailyCnt2$trafficCount))
cnt$x[which.max(cnt$y)]
?echo
?cat
?cat
cat(" The peak is")
cnt$x[which.max(cnt$y)]
cat("\nThe summary of counts")
cnt
cat(" The peak is" ,cnt$x[which.max(cnt$y)])
cat("\nThe summary of counts\n\n")
cnt
cat(" The peak is" ,cnt$x[which.max(cnt$y)])
cat("\n\n\nThe summary of counts\n\n",cnt)
cat(" The peak is" ,cnt$x[which.max(cnt$y)])
cat("\n\n\nThe summary of counts\n\n")
cnt
head(sqrt(DailyCnt2$trafficCount))
sum(DailyCnt2<0)
sum(DailyCnt2$trafficCount<0)
sumarym(DailyCnt2$trafficCount)
summary(DailyCnt2$trafficCount)
cat(" The peak is" ,cnt$x[which.max(cnt$y)])
cat("\n\n\nThe summary of counts\n\n")
summary(DailyCnt2$trafficCount)
?density
cat("\n\n\nThe summary of counts\n\n")
summary(DailyCnt2$trafficCount)
cat("The summary of counts\n\n")
summary(DailyCnt2$trafficCount)
summary(DailyCnt2$trafficCount[DailyCnt2$classWeight=="Heavy"])
summary(DailyCnt2$trafficCount[DailyCnt2$classWeight=="Light"])
summary(DailyCnt2$trafficCount[DailyCnt2$classWeight=="Heavy"])
sumamry(DailyCnt2$trafficCount[DailyCnt2$classWeight=="Light"])
summary(DailyCnt2$trafficCount[DailyCnt2$classWeight=="Light"])
DailyCnt2$scount <- sqrt(DailyCnt2$trafficCount)
index <- sample(rep(1:10, length.out=nrow(DailyCnt2)))
train <- DailyCnt2[index > 1, ]
test <- DailyCnt2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ classWeight, train)
predLM1 <- predict(lmfit1, test)
RMSE(obs, predLM1)
plot(scount ~ jitter(as.numeric(factor(classWeight))), test,
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$classWeight))),
predict(lmfit1, data.frame(classWeight=unique(factor(test$classWeight)))),
pch=16, col="red")
RMSE(obs, predMean)
