skip.streams(1)
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
set.seed(1)
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
set.seed(1)
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
set.seed(1)
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=1) ))
set.seed(1)
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
set.seed(1)
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=5) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=5) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=5) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=5) ))
sum(unlist(mclapply(1:16,function(x) sample(n,k),mc.cores=2) ))
set.seed(769)
lapply(1:R, function(i)index = sample(n, k))
knitr::opts_chunk$set(echo = TRUE)
auto = read.csv("automobile.csv", stringsAsFactors=TRUE)
auto2 = auto[,c("wheel.base", "length", "height", "highway.mpg", "price")]
pairs(auto2)
library(splines)
library(gam)
library(parallel)
polymodels <- list(NULL)
for (i in 1:5){
print(r <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2))
polymodels[[i]] =r
}
with(auto2,plot(highway.mpg,price,ylim=c(0,max(price)+1000),pch=20))
for(i in 1:5){
m <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2)
newX = data.frame(highway.mpg=seq(min(auto2$highway.mpg),max(auto2$highway.mpg),0.1))
pred <- predict(m,newX)
lines(newX$highway.mpg,pred,col=i+1)
}
legend("topright",paste("deg",1:5),col=1:5+1,lty=1)
n = nrow(auto2)
lapply(1:5,function(i){
m<- lm(price~poly(highway.mpg,i),data=auto2)
#Use loglikelihood
#-2*logLik(m) + log(n)*length(m$coefficients)
#use RSS
n*log(sum(m$residuals^2)) + log(n)*(length(m$coefficients))
})
(gam.m1 = gam(price ~ s(wheel.base, 5)+s(length, 5)+s(height,5)+s(highway.mpg,5), data=auto2))
par(mfrow=c(2,2))
plot(gam.m1)
newdata <- data.frame(wheel.base = 110, length = 190, height = 55, highway.mpg = 25)
predict(r,newdata)
gam.m1 = gam(price ~ s(wheel.base, 2)+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m2 = gam(price ~ s(wheel.base, 2)+length+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m3 = gam(price ~ s(wheel.base, 5)+s(length,5)+s(height,5)+s(highway.mpg,5), data=auto2)
anova(gam.m1,gam.m2,gam.m3,test="F")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
M = 5
n = nrow(auto2)
R = 5
K=10
mse = matrix(nrow=R*K,ncol=M)
test.set <- function(i, n, K=10) {
if(i < 1 || i > K)
stop(" i out of range (1, K)")
start = round(1 + (i-1) * n / K)
end = ifelse(i == K, n, round(i * n / K))
start:end
}
test.set(2,n)
set.seed(769)           # set a random seed
for(i in 1:R) {                  # for each repetition
ind = sample(n)
for(k in 1:K) {                # for each fold
index = ind[test.set(k, n, K)]
test = auto2[index,]
train = auto2[-index,]
for(m in 1:M) {     # for each number of knots (method)
rg = range(train$highway.mpg)
knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)]
r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=train)
yhat = predict(r, test)         # prediction for test data
mse[K*(i-1)+k,m] = mean( (test$price - yhat)^2 )
}
}
}
head(mse)
(pe = cbind(m=1:M, mse=colMeans(mse)))
(mmin = which.min(pe[,2]))
plot(pe[,1], pe[,2], type="l", xlab="number of knots", ylab="mse")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
n = nrow(auto2)
k = round(n * 0.10)
deg =1:5
R = 200                  # number of repetitions
mse = matrix(nrow=R, ncol=length(deg))   # pre-allocate space
dim(mse)
set.seed(769)           # set a random seed
for(j in deg) {
for(i in 1:R) {
index = sample(n, k)
test = auto2[index,]
train = auto2[-index,]
r = lm(price ~poly(highway.mpg,degree=j,raw=TRUE), data= train)
yhat = predict(r, test)     # prediction for test data
mse[i,j] = mean( (test$price - yhat)^2 )
}
}
head(mse)
(pe = cbind(deg=1:5, mse=colMeans(mse)))
(deg_min = which.min(pe[,2]))
with(auto2,plot(highway.mpg,price,ylim=c(0,max(price)+1000),pch=20))
m <- lm(price ~ poly(highway.mpg, 2, raw=TRUE), data=auto2)
newX = data.frame(highway.mpg=seq(min(auto2$highway.mpg),max(auto2$highway.mpg),0.1))
pred <- predict(m,newX)
lines(newX$highway.mpg,pred,col='red')
legend("topright",paste("deg",2),col='red',lty=1)
set.seed(769)
lapply(1:R, function(i)index = sample(n, k))
skip.streams <- function(n) {
x <- .Random.seed
for (i in seq_len(n))
x <- nextRNGStream(x)
assign('.Random.seed', x, pos=.GlobalEnv)
}
RNGkind("L'Ecuyer-CMRG")
n = nrow(auto2)
k = round(n * 0.10)
R = 200                  # number of repetitions
mse = matrix(nrow=R, ncol=5)   # pre-allocate space
deg =5
set.seed(769)
samples_list <- lapply(1:R, function(i)index = sample(n, k))
lapply(c(1,5,10,20),
function(nc) system.time({
mse <- mclapply(samples_list,function(index){
mse <- numeric(deg)
for(j in 1:deg) {
test = auto2[index,]
train = auto2[-index,]
r = lm(price ~poly(highway.mpg,degree=j,raw=TRUE), data= train)
yhat = predict(r, test)     # prediction for test data
mse[j] = mean( (test$price - yhat)^2 )
}
mse
} ,mc.cores = nc)
#  skip.streams(nc)
mse = matrix(data=unlist(mse),nrow=R,ncol=deg,byrow=T)
pe = cbind(deg=1:5, mse=colMeans(mse))
print(paste("The selected degree is ",which.min(pe[,2])))
}
))
sample_list
samples_list
knitr::opts_chunk$set(echo = TRUE)
auto = read.csv("automobile.csv", stringsAsFactors=TRUE)
auto2 = auto[,c("wheel.base", "length", "height", "highway.mpg", "price")]
pairs(auto2)
library(splines)
library(gam)
library(parallel)
polymodels <- list(NULL)
for (i in 1:5){
print(r <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2))
polymodels[[i]] =r
}
with(auto2,plot(highway.mpg,price,ylim=c(0,max(price)+1000),pch=20))
for(i in 1:5){
m <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2)
newX = data.frame(highway.mpg=seq(min(auto2$highway.mpg),max(auto2$highway.mpg),0.1))
pred <- predict(m,newX)
lines(newX$highway.mpg,pred,col=i+1)
}
legend("topright",paste("deg",1:5),col=1:5+1,lty=1)
n = nrow(auto2)
lapply(1:5,function(i){
m<- lm(price~poly(highway.mpg,i),data=auto2)
#Use loglikelihood
#-2*logLik(m) + log(n)*length(m$coefficients)
#use RSS
n*log(sum(m$residuals^2)) + log(n)*(length(m$coefficients))
})
(gam.m1 = gam(price ~ s(wheel.base, 5)+s(length, 5)+s(height,5)+s(highway.mpg,5), data=auto2))
par(mfrow=c(2,2))
plot(gam.m1)
newdata <- data.frame(wheel.base = 110, length = 190, height = 55, highway.mpg = 25)
predict(r,newdata)
gam.m1 = gam(price ~ s(wheel.base, 2)+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m2 = gam(price ~ s(wheel.base, 2)+length+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m3 = gam(price ~ s(wheel.base, 5)+s(length,5)+s(height,5)+s(highway.mpg,5), data=auto2)
anova(gam.m1,gam.m2,gam.m3,test="F")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
M = 5
n = nrow(auto2)
R = 5
K=10
mse = matrix(nrow=R*K,ncol=M)
test.set <- function(i, n, K=10) {
if(i < 1 || i > K)
stop(" i out of range (1, K)")
start = round(1 + (i-1) * n / K)
end = ifelse(i == K, n, round(i * n / K))
start:end
}
test.set(2,n)
set.seed(769)           # set a random seed
for(i in 1:R) {                  # for each repetition
ind = sample(n)
for(k in 1:K) {                # for each fold
index = ind[test.set(k, n, K)]
test = auto2[index,]
train = auto2[-index,]
for(m in 1:M) {     # for each number of knots (method)
rg = range(train$highway.mpg)
knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)]
r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=train)
yhat = predict(r, test)         # prediction for test data
mse[K*(i-1)+k,m] = mean( (test$price - yhat)^2 )
}
}
}
head(mse)
(pe = cbind(m=1:M, mse=colMeans(mse)))
(mmin = which.min(pe[,2]))
plot(pe[,1], pe[,2], type="l", xlab="number of knots", ylab="mse")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
set.seed(769)           # set a random seed
for(i in 1:R) {
index = sample(n, k)
test = auto2[index,]
train = auto2[-index,]
for(j in deg) {
r = lm(price ~poly(highway.mpg,degree=j,raw=TRUE), data= train)
yhat = predict(r, test)     # prediction for test data
mse[i,j] = mean( (test$price - yhat)^2 )
}
}
head(mse)
(pe = cbind(deg=1:5, mse=colMeans(mse)))
(deg_min = which.min(pe[,2]))
knitr::opts_chunk$set(echo = TRUE)
auto = read.csv("automobile.csv", stringsAsFactors=TRUE)
auto2 = auto[,c("wheel.base", "length", "height", "highway.mpg", "price")]
pairs(auto2)
library(splines)
library(gam)
library(parallel)
polymodels <- list(NULL)
for (i in 1:5){
print(r <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2))
polymodels[[i]] =r
}
with(auto2,plot(highway.mpg,price,ylim=c(0,max(price)+1000),pch=20))
for(i in 1:5){
m <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2)
newX = data.frame(highway.mpg=seq(min(auto2$highway.mpg),max(auto2$highway.mpg),0.1))
pred <- predict(m,newX)
lines(newX$highway.mpg,pred,col=i+1)
}
legend("topright",paste("deg",1:5),col=1:5+1,lty=1)
n = nrow(auto2)
lapply(1:5,function(i){
m<- lm(price~poly(highway.mpg,i),data=auto2)
#Use loglikelihood
#-2*logLik(m) + log(n)*length(m$coefficients)
#use RSS
n*log(sum(m$residuals^2)) + log(n)*(length(m$coefficients))
})
(gam.m1 = gam(price ~ s(wheel.base, 5)+s(length, 5)+s(height,5)+s(highway.mpg,5), data=auto2))
par(mfrow=c(2,2))
plot(gam.m1)
newdata <- data.frame(wheel.base = 110, length = 190, height = 55, highway.mpg = 25)
predict(r,newdata)
gam.m1 = gam(price ~ s(wheel.base, 2)+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m2 = gam(price ~ s(wheel.base, 2)+length+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m3 = gam(price ~ s(wheel.base, 5)+s(length,5)+s(height,5)+s(highway.mpg,5), data=auto2)
anova(gam.m1,gam.m2,gam.m3,test="F")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
M = 5
n = nrow(auto2)
R = 5
K=10
mse = matrix(nrow=R*K,ncol=M)
test.set <- function(i, n, K=10) {
if(i < 1 || i > K)
stop(" i out of range (1, K)")
start = round(1 + (i-1) * n / K)
end = ifelse(i == K, n, round(i * n / K))
start:end
}
test.set(2,n)
set.seed(769)           # set a random seed
for(i in 1:R) {                  # for each repetition
ind = sample(n)
for(k in 1:K) {                # for each fold
index = ind[test.set(k, n, K)]
test = auto2[index,]
train = auto2[-index,]
for(m in 1:M) {     # for each number of knots (method)
rg = range(train$highway.mpg)
knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)]
r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=train)
yhat = predict(r, test)         # prediction for test data
mse[K*(i-1)+k,m] = mean( (test$price - yhat)^2 )
}
}
}
head(mse)
(pe = cbind(m=1:M, mse=colMeans(mse)))
(mmin = which.min(pe[,2]))
plot(pe[,1], pe[,2], type="l", xlab="number of knots", ylab="mse")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
n = nrow(auto2)
k = round(n * 0.10)
deg =1:5
R = 200                  # number of repetitions
mse = matrix(nrow=R, ncol=length(deg))   # pre-allocate space
dim(mse)
set.seed(769)           # set a random seed
for(i in 1:R) {
index = sample(n, k)
test = auto2[index,]
train = auto2[-index,]
for(j in deg) {
r = lm(price ~poly(highway.mpg,degree=j,raw=TRUE), data= train)
yhat = predict(r, test)     # prediction for test data
mse[i,j] = mean( (test$price - yhat)^2 )
}
}
head(mse)
(pe = cbind(deg=1:5, mse=colMeans(mse)))
(deg_min = which.min(pe[,2]))
knitr::opts_chunk$set(echo = TRUE)
auto = read.csv("automobile.csv", stringsAsFactors=TRUE)
auto2 = auto[,c("wheel.base", "length", "height", "highway.mpg", "price")]
pairs(auto2)
library(splines)
library(gam)
library(parallel)
polymodels <- list(NULL)
for (i in 1:5){
print(r <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2))
polymodels[[i]] =r
}
with(auto2,plot(highway.mpg,price,ylim=c(0,max(price)+1000),pch=20))
for(i in 1:5){
m <- lm(price ~ poly(highway.mpg, i, raw=TRUE), data=auto2)
newX = data.frame(highway.mpg=seq(min(auto2$highway.mpg),max(auto2$highway.mpg),0.1))
pred <- predict(m,newX)
lines(newX$highway.mpg,pred,col=i+1)
}
legend("topright",paste("deg",1:5),col=1:5+1,lty=1)
n = nrow(auto2)
lapply(1:5,function(i){
m<- lm(price~poly(highway.mpg,i),data=auto2)
#Use loglikelihood
#-2*logLik(m) + log(n)*length(m$coefficients)
#use RSS
n*log(sum(m$residuals^2)) + log(n)*(length(m$coefficients))
})
(gam.m1 = gam(price ~ s(wheel.base, 5)+s(length, 5)+s(height,5)+s(highway.mpg,5), data=auto2))
par(mfrow=c(2,2))
plot(gam.m1)
newdata <- data.frame(wheel.base = 110, length = 190, height = 55, highway.mpg = 25)
predict(r,newdata)
gam.m1 = gam(price ~ s(wheel.base, 2)+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m2 = gam(price ~ s(wheel.base, 2)+length+s(height,5)+s(highway.mpg,5), data=auto2)
gam.m3 = gam(price ~ s(wheel.base, 5)+s(length,5)+s(height,5)+s(highway.mpg,5), data=auto2)
anova(gam.m1,gam.m2,gam.m3,test="F")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
M = 5
n = nrow(auto2)
R = 5
K=10
mse = matrix(nrow=R*K,ncol=M)
test.set <- function(i, n, K=10) {
if(i < 1 || i > K)
stop(" i out of range (1, K)")
start = round(1 + (i-1) * n / K)
end = ifelse(i == K, n, round(i * n / K))
start:end
}
test.set(2,n)
set.seed(769)           # set a random seed
for(i in 1:R) {                  # for each repetition
ind = sample(n)
for(k in 1:K) {                # for each fold
index = ind[test.set(k, n, K)]
test = auto2[index,]
train = auto2[-index,]
for(m in 1:M) {     # for each number of knots (method)
rg = range(train$highway.mpg)
knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)]
r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=train)
yhat = predict(r, test)         # prediction for test data
mse[K*(i-1)+k,m] = mean( (test$price - yhat)^2 )
}
}
}
head(mse)
(pe = cbind(m=1:M, mse=colMeans(mse)))
(mmin = which.min(pe[,2]))
plot(pe[,1], pe[,2], type="l", xlab="number of knots", ylab="mse")
attach(auto2)
m = 5            # number of knots
(rg = range(highway.mpg))
(knots = seq(rg[1], rg[2], length=m+2)[-c(1,m+2)])
detach(auto2)
(r = lm(price ~ bs(highway.mpg, knots=knots, degree=3), data=auto2))
yhat = predict(r, newX)
with(auto2, plot(highway.mpg, price))
lines(newX$highway.mpg, yhat, col="red")
points(knots, predict(r, data.frame(highway.mpg=knots)), col="red", pch=19)  # add knots
n = nrow(auto2)
k = round(n * 0.10)
deg =1:5
R = 200                  # number of repetitions
mse = matrix(nrow=R, ncol=length(deg))   # pre-allocate space
dim(mse)
set.seed(769)           # set a random seed
for(i in 1:R) {
index = sample(n, k)
test = auto2[index,]
train = auto2[-index,]
for(j in deg) {
r = lm(price ~poly(highway.mpg,degree=j,raw=TRUE), data= train)
yhat = predict(r, test)     # prediction for test data
mse[i,j] = mean( (test$price - yhat)^2 )
}
}
head(mse)
(pe = cbind(deg=1:5, mse=colMeans(mse)))
(deg_min = which.min(pe[,2]))
with(auto2,plot(highway.mpg,price,ylim=c(0,max(price)+1000),pch=20))
m <- lm(price ~ poly(highway.mpg, 3, raw=TRUE), data=auto2)
newX = data.frame(highway.mpg=seq(min(auto2$highway.mpg),max(auto2$highway.mpg),0.1))
pred <- predict(m,newX)
lines(newX$highway.mpg,pred,col='red')
legend("topright",paste("deg",3),col='red',lty=1)
