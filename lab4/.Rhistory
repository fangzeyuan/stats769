y <- f(x)
plot(x,y,,lty=3)
plot(x,y,lty=3)
plot(x,y,lty=2)
plot(x,y,lty='2')
plot(x,y)
f(100)
x <- seq(0,10,0.01)
y <- f(x)
plot(x,y)
f <- function(x){
if(x== - 3)
return x
-x
}
x <- seq(0,10,0.01)
y <- f(x)
plot(x,y)
x <- seq(-10,10,0.01)
y <- f(x)
plot(x,y)
plot(x,y,type='p')
x <- seq(-10,10,0.1)
y <- f(x)
plot(x,y,type='p')
f <- function(x){
if(x== - 3)
return -x
x
}
x <- seq(-10,10,0.1)
y <- f(x)
y
plot(x,y,type='p')
f <- function(x){
if(x== - 3)
return -x;
else
return x;
}
f <- function(x){
if(x== - 3)
return -x
else
return x
}
f <- function(x){
if(x== - 3)
-x
else
x
}
x <- seq(-10,10,0.1)
y <- f(x)
x <- seq(-10,10,0.1)
y <- f(x)
f <- function(x){
-x
}
f(3)
f(5)
x <- seq(-10,10,0.1)
y <- f(x)
plot(x,y,type='p')
f(100)
f(-100)
library('tidyverse')
x<-c(4,4,4,8,4)
plot(x)
lines(x)
plot(x,ylim = c(0,16))
lines(x,)
y<-c(4,8,8,8,4,)
y<-c(4,8,8,8,4)
plot(y)
lines(y)
plot(y,ylim(0,10))
lines(y)
plot(y,ylim=c(0,10))
lines(y)
ggplot(data=x)
data =data.frame(i=1:5,x=x)
ggplot(data) + geom_point(aes(i,x))
ggplot(data) + geom_point(aes(i,x)) + geom_line()
ggplot(data,aes(i,x))) + geom_point() + geom_line()
ggplot(data) + geom_point(aes(i,x)) + geom_line(aes(i,x))
data =data.frame(i=1:5,x=y)
ggplot(data) + geom_point(aes(i,x)) + geom_line(aes(i,x))
setwd("~/canvas/stats769/lab4")
knitr::opts_chunk$set(echo = TRUE)
system.time( read.csv('AugustTraffic.csv'))
?read.csv
traffic <- read.csv('AugustTraffic.csv')
system.time( read.csv('AugustTraffic.csv'))
system.time( read.csv('AugustTraffic.csv',colClasses =c('factor','factor','factor','factor','Integer','numeric') ))
system.time( read.csv('AugustTraffic.csv'))
system.time( read.csv('AugustTraffic.csv',colClasses =c('factor','factor','factor','factor','integer','numeric') ))
file <- "/course/NZTA/AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time( read.csv(file))
file <- "/course/NZTA/AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time( read.csv(file))
file <- "AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time( read.csv(file))
system.time( read.csv(file,colClasses =c('factor','factor','factor','factor','integer','numeric') ))
system.time(data.table::fread(file))
file <- "AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time(countsDF<- read.csv(file))
file <- "AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time(countsDF<- read.csv(file))
system.time( countsDF<-read.csv(file,colClasses =c('factor','factor','factor','factor','integer','numeric') ))
system.time(countsDF<-data.table::fread(file))
countsDF$day <- as.Date(countsDF$startDatetime, format="%d-%b-%Y")
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
countsDF$day
dailyCountsDT <- countsDT[, day := as.Date(startDatetime, format="%d-%b-%Y")][, sum(count), .(day, siteRef, class)]
system.time(countsDT<-data.table::fread(file))
dailyCountsDT <- countsDT[, day := as.Date(startDatetime, format="%d-%b-%Y")][, sum(count), .(day, siteRef, class)]
dailyCountsDT
View(countsDF)
View(countsDF)
countsDF$day <- substr(countsDF$startDatetime, 0,11)
countsDF$day <- substr(countsDF$startDatetime, 0,10)
countsDF$day <- substr(countsDF$startDatetime, 0,11)
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
file <- "AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time(countsDF<- read.csv(file))
system.time( countsDF<-read.csv(file,colClasses =c('factor','factor','factor','factor','integer','numeric') ))
system.time(countsDT<-data.table::fread(file))
countsDF$day <- substr(countsDF$startDatetime, 0,11)
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
file <- "AugustTraffic.csv"
#file <- "/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv"
system.time(countsDF<- read.csv(file))
system.time( countsDF<-read.csv(file,colClasses =c('factor','factor','factor','factor','integer','numeric') ))
system.time(countsDT<-data.table::fread(file))
countsDF$day <- as.Date(countsDF$startDatetime, format="%d-%b-%Y")
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
countsDF$day <- substr(countsDF$startDatetime, 0,11)
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
View(dailyCountsDF)
View(dailyCountsDF)
dailyCountsDT <- countsDT[, day :=  substr(countsDT$startDatetime, 0,11)][, sum(count), .(day, siteRef, class)]
countsDF$day <- as.Date(countsDF$startDatetime, format="%d-%b-%Y")
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
dailyCountsDT <- countsDT[, day := as.Date(startDatetime, format="%d-%b-%Y")][, sum(count), .(day, siteRef, class)]
countsDF$day <- substr(countsDF$startDatetime, 0,11)
dailyCountsDF2 <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
dailyCountsDT2 <- countsDT[, day :=  substr(countsDT$startDatetime, 0,11)][, sum(count), .(day, siteRef, class)]
nrow(dailyCountsDF)
nrow(dailyCountsDF2)
nrow(dailyCountsDT)
nrow(dailyCountsDT2)
head(dailyCountsDF[order(-dailyCountsDF$count),],10)
head(dailyCountsDF2[order(-dailyCountsDF2$count),],10)
head(dailyCountsDT[order(-dailyCountsDT$V1),],10)
head(dailyCountsDT2[order(-dailyCountsDT2$V1),],10)
dailyCountsDF$scount <- sqrt(dailyCountsDF$count)
View(dailyCountsDF)
View(dailyCountsDF)
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
train <- dailyCountsDF2[index > 1, ]
test <- dailyCountsDF2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ class, train)
dailyCountsDF2$scount <- sqrt(dailyCountsDF$count)
dailyCountsDF2$scount <- sqrt(dailyCountsDF2$count)
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
train <- dailyCountsDF2[index > 1, ]
test <- dailyCountsDF2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
lmfit2 <- lm(scount ~ class+siteRef, train)
predLM2 <-predict(lmfit2,test)
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
train <- dailyCountsDF2[index > 1, ]
test <- dailyCountsDF2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
obs <- test$scount
predMean <- mean(train$scount)
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE(obs, predMean)
MeanRMSE <- vector(10)
MeanRMSE <- vector(0,10)
MeanRMSE <- rep(0,10)
MeanRMSE
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
train <- dailyCountsDF2[index > 1, ]
test <- dailyCountsDF2[index == 1, ]
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predMean)
}
RMSE_cv
mean(RMSE_cv)
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predMean)
}
RMSE_cv
mean(RMSE_cv)
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predLM1)
}
RMSE_cv
mean(RMSE_cv)
install.packages('profvis')
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
getMeanRMSE <- function(){
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predLM1)
}
mean(RMSE_cv)
}
getMeanRMSE()
p <- profvis(getMeanRMSE())
library(profvis)
p <- profvis(getMeanRMSE())
install.packages('profvis')
library(profvis)
p <- profvis(getMeanRMSE())
p
View(p)
View(p)
p
htmlwidgets::saveWidget(p, "profile.html")
p<- profvis({
countsDF$day <- substr(countsDF$startDatetime, 0,11)
dailyCountsDF2 <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
})
htmlwidgets::saveWidget(p, "profile.html")
p<- profvis({
countsDF$day <- substr(countsDF$startDatetime, 0,11)
dailyCountsDF2 <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
})
p
p<- profvis({
countsDF$day <- as.Date(countsDF$startDatetime, format="%d-%b-%Y")
dailyCountsDF <- aggregate(countsDF["count"],
countsDF[c("day", "siteRef", "class")],
sum)
})
p
p<- profvis({
dailyCountsDT <- countsDT[, day := as.Date(startDatetime, format="%d-%b-%Y")][, sum(count), .(day, siteRef, class)]
})
p
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predLM1)
}
dailyCountsDF2$scount <- sqrt(dailyCountsDF2$count)
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predLM1)
}
mean(RMSE_cv)
p <- profvis({
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
RMSE_cv[i] <-  RMSE(obs, predLM1)
}
mean(RMSE_cv)
}
)
p <- profvis({
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv_lm <- rep(0,10)
RMSE_cv_mean_model <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
predMean <- mean(train$scount)
RMSE_cv_lm[i] <-  RMSE(obs, predLM1)
RMSE_cv_mean_model  <- RMSE(obs,predMean)
}
})
p
p <- profvis({
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv_lm <- rep(0,10)
RMSE_cv_mean_model <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit1 <- lm(scount ~ class, train)
predLM1 <- predict(lmfit1, test)
predMean <- mean(train$scount)
RMSE_cv_lm[i] <-  RMSE(obs, predLM1)
RMSE_cv_mean_model[i]  <- RMSE(obs,predMean)
}
})
p
mean(RMSE_cv)
mean(RMSE_cv_mean_model)
plot(scount ~ jitter(as.numeric(factor(class))), test,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$class))),
predict(lmfit,
data.frame(class=unique(factor(test$class)))),
pch=16, col="red")
p <- profvis({
RMSE <- function(obs, pred) {
sqrt(mean((obs - pred)^2))
}
index <- sample(rep(1:10, length.out=nrow(dailyCountsDF2)))
RMSE_cv_lm <- rep(0,10)
RMSE_cv_mean_model <- rep(0,10)
for(i in 1:10){
train <- dailyCountsDF2[index == i, ]
test <- dailyCountsDF2[index != i, ]
obs <- test$scount
lmfit <- lm(scount ~ class, train)
predLM1 <- predict(lmfit, test)
predMean <- mean(train$scount)
RMSE_cv_lm[i] <-  RMSE(obs, predLM1)
RMSE_cv_mean_model[i]  <- RMSE(obs,predMean)
}
})
p
mean(RMSE_cv_lm)
mean(RMSE_cv_mean_model)
plot(scount ~ jitter(as.numeric(factor(class))), test,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(test$class))),
label=unique(factor(test$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$class))),
predict(lmfit,
data.frame(class=unique(factor(test$class)))),
pch=16, col="red")
predMean <- mean(dailyCountsDF2$scount)
plot(scount ~ jitter(as.numeric(factor(class))), dailyCountsDF2,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(dailyCountsDF2$class))),
label=unique(factor(dailyCountsDF2$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(test$class))),
predict(lmfit, dailyCountsDF2)),
predMean <- mean(dailyCountsDF2$scount)
plot(scount ~ jitter(as.numeric(factor(class))), dailyCountsDF2,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(dailyCountsDF2$class))),
label=unique(factor(dailyCountsDF2$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(dailyCountsDF2$class))),
predict(lmfit, dailyCountsDF2)),
predMean <- mean(dailyCountsDF2$scount)
plot(scount ~ jitter(as.numeric(factor(class))), dailyCountsDF2,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(dailyCountsDF2$class))),
label=unique(factor(dailyCountsDF2$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(dailyCountsDF2$class))),
predict(lmfit, dailyCountsDF2),
pch=16, col="red")
View(dailyCountsDF)
View(dailyCountsDF2)
predMean <- mean(dailyCountsDF2$scount)
plot(scount ~ jitter(as.numeric(factor(class))), dailyCountsDF2,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(dailyCountsDF2$class))),
label=unique(factor(dailyCountsDF2$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(dailyCountsDF2$class))),
data.frame(class=unique(factor(dailyCountsDF2$class))),
pch=16, col="red")
predMean <- mean(dailyCountsDF2$scount)
plot(scount ~ jitter(as.numeric(factor(class))), dailyCountsDF2,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(dailyCountsDF2$class))),
label=unique(factor(dailyCountsDF2$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(dailyCountsDF2$class))),
predict(lmfit,
data.frame(class=unique(factor(dailyCountsDF2$class)))),
pch=16, col="red")
predMean <- mean(dailyCountsDF2$scount)
plot(scount ~ jitter(as.numeric(factor(class))), dailyCountsDF2,
col=rgb(0,0,0,.2),
xlab="class", axes=FALSE)
axis(2)
axis(1, at=as.numeric(unique(factor(dailyCountsDF2$class))),
label=unique(factor(dailyCountsDF2$class)))
abline(h=predMean, col="green")
points(as.numeric(unique(factor(dailyCountsDF2$class))),
predict(lmfit,
data.frame(class=unique(factor(dailyCountsDF2$class)))),
pch=16, col="red")
