new2
scale(new[,1:5]
)
new2 <- new
new2[,1:5] <- scale(new[,1:5])
r0 = kmeans(new2[,-6], centers=2)
r0$cluster
summary(r0$cluster)
str(r0$cluster)
table(r0$cluster
)
new2
new[order(r0$cluster),]
order(r0$cluster)
r0$cluster
with(new2[order(r0$cluster),], pairs(new[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)"))
with(new2[-order(r0$cluster),], pairs(new[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)"))
with(new2[order(r0$cluster),], pairs(new[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)"))
with(new[order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
table(r$classification)
table(phoneme$Class)
# Here we reverse the order, let 1 represent the majority class, 2 represent the minority class.
r$classification <- r$classification%%2 +1
with(new[order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
# Here we reverse the order, let 1 represent the majority class, 2 represent the minority class.
r$classification <- r$classification%%2 +1
with(new[-order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
r$classification
(r = densityMclust(new[,1:5], G=2, modelNames="VVV"))
r$classification
r$classification <- r$classification%%2 +1
r$classification
(r = densityMclust(new[,1:5], G=2, modelNames="VVV"))
# Here we reverse the order, let 1 represent the majority class, 2 represent the minority class.
r$classification <- r$classification%%2 +1
with(new[order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
(r = densityMclust(new[,1:5], G=2, modelNames="VVV"))
# Here we reverse the order, let 1 represent the majority class, 2 represent the minority class.
r$classification <- r$classification%%2 +1
with(new[-order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
with(new[-order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
with(new[order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
with(new[-order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
with(new[-order(r$classification),], pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)"))
pairs(new[-order(r$classification),-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
pairs(new[-order(r$classification),-6], col=r$classification+1,pch=r$classification+1,main="G = 2 (Original Data)")
pairs(new[-order(r$classification),-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
pairs(new[-order(r$classification),-6], col=r$classification+1, pch=r$classification+1,main='G = 2 (Original Data)')
pairs(new[-order(r$classification),-6], col=r$classification+1, pch=r$classification+1)
r0$cluster
table(r0$cluster)
with(new2[order(r0$cluster),], pairs(new[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)"))
ari = double(8)
# we should reverse the class level as 2-clusters does.
label <- as.numeric(new2$Class)%%2+1
for(k in 2:9) {
r = kmeans(new2[,1:5], centers=k)
ari[k-1] = adjustedRandIndex(label, r$cluster)
}
ari
(r = densityMclust(new[,1:5], G=2, modelNames="VVV"))
r$classification
table(r$classification)
, pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
pairs(new[order(r$classification),-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
(r = densityMclust(new[,1:5], G=2, modelNames="VVV"))
pairs(new[order(r$classification),-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
table(r$classification)
# Here we reverse the order, let 1 represent the majority class, 2 represent the minority class.
r$classification <- r$classification%%2 +1
pairs(new[order(r$classification),-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
table(r$classification)
pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
pairs(new[,-6], col=r$classification+1, pch=r$classification+1,main="G = 2 (Original Data)")
table(new$Class)
table(label)
new2 <- new
new2[,1:5] <- scale(new[,1:5])
r0 = kmeans(new2[,-6], centers=2)
table(r0$cluster)
ari = double(8)
for(k in 2:9) {
r = kmeans(new2[,1:5], centers=k)
ari[k-1] = adjustedRandIndex(new2$Class, r$cluster)
}
ari
with(phoneme, pairs(phoneme[order(Class),-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
Nasal=phoneme[which(phoneme$Class=="Nasal"),]
Oral=phoneme[which(phoneme$Class=="Oral"),]
new=rbind(Nasal,Oral)
with(new, pairs(new[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
with(phoneme, pairs(phoneme[order(Class),-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
with(new, pairs(new[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
with(new, pairs(new[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
with(phoneme, pairs(phoneme[order(Class),-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
with(phoneme, pairs(phoneme[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
phoneme <- phoneme[order(phoneme$Class),]
with(phoneme, pairs(phoneme[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
with(phoneme, pairs(phoneme[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
knitr::opts_chunk$set(echo = TRUE)
phoneme = read.csv("phoneme.csv", stringsAsFactors=TRUE)
library(mclust)
with(phoneme, pairs(phoneme[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
phoneme <- phoneme[order(phoneme$Class),]
with(phoneme, pairs(phoneme[order(Class),-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
attach(phoneme)
hist(V1, freq=FALSE, breaks=100,
col="gray80", border="white",
main="Denstiy Estimation", xlab="V1")
methods <-c("nrd0", "ucv", "bcv", "SJ")
for(bw in methods) {
lines(density(V1, bw=bw), col=match(bw,methods)+10, lwd=2)
}
cols <- which(methods==methods) +10
legend("topright",legend = methods,col = cols,lwd=2)
(r = densityMclust(V1, G=1:20))
plot.Mclust(r,"BIC")
r2 = densityMclust(V1, G=6,modelNames="V")
x = seq(min(V1), max(V1), len=500)
plot(r2, V1, "density", breaks=100, lwd=2, col=4)
r_e_c1 = densityMclust(phoneme[Class=='Nasal',1:5],G=1:9,modelNames="EEE")
plot(r_e_c1,what="density", col=4, points.col="grey")
r_e_c2 = densityMclust(phoneme[Class=='Oral',1:5],G=1:9,modelNames="EEE")
plot(r_e_c2,what="density", col=4, points.col="grey")
r_v_c1 = densityMclust(phoneme[Class=='Nasal',1:5],G=1:9,modelNames="VVV")
plot(r_v_c1,what="density",col=2, points.col="grey")
r_v_c2 = densityMclust(phoneme[Class=='Oral',1:5],G=1:9,modelNames="VVV")
plot(r_v_c2,what="density",col=2, points.col="grey")
p1 <- mean(Class=='Nasal')
p2 <- 1-p1
f_1 <- predict(r_e_c1,phoneme[,1:5])
f_2 <- predict(r_e_c2,phoneme[,1:5])
p<- f_1*p1/(f_1*p1+f_2*p2)
p <- (p<0.5)+1
mean(p==as.numeric(Class))
p1 <- mean(Class=='Nasal')
p2 <- 1-p1
f_1 <- predict(r_v_c1,phoneme[,1:5])
f_2 <- predict(r_v_c2,phoneme[,1:5])
a<- f_1*p1/(f_1*p1+f_2*p2)
b<-f_2*p2/(f_1*p1+f_2*p2)
p <- (a<0.5)+1
mean(p==as.numeric(Class))
phoneme2 <- phoneme
phoneme2[,1:5] <- scale(phoneme[,1:5])
r0 = kmeans(phoneme2[,-6], centers=2)
with(phoneme2, pairs(new[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)"))
with(phoneme2, pairs(new[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)"))
pairs(phoneme2[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
pairs(phoneme2[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
table(r0$cluster)
phoneme2 <- phoneme2[sort(r0$cluster),]
pairs(phoneme2[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
pairs(phoneme2[,-6], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
phoneme2
View(phoneme2)
r0$cluster
length(r0$cluster)
order(r0$cluster)
knitr::opts_chunk$set(echo = TRUE)
phoneme = read.csv("phoneme.csv", stringsAsFactors=TRUE)
library(mclust)
with(phoneme, pairs(phoneme[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
phoneme <- phoneme[order(phoneme$Class),]
with(phoneme, pairs(phoneme[order(Class),-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
attach(phoneme)
hist(V1, freq=FALSE, breaks=100,
col="gray80", border="white",
main="Denstiy Estimation", xlab="V1")
methods <-c("nrd0", "ucv", "bcv", "SJ")
for(bw in methods) {
lines(density(V1, bw=bw), col=match(bw,methods)+10, lwd=2)
}
cols <- which(methods==methods) +10
legend("topright",legend = methods,col = cols,lwd=2)
(r = densityMclust(V1, G=1:20))
plot.Mclust(r,"BIC")
r2 = densityMclust(V1, G=6,modelNames="V")
x = seq(min(V1), max(V1), len=500)
plot(r2, V1, "density", breaks=100, lwd=2, col=4)
r_e_c1 = densityMclust(phoneme[Class=='Nasal',1:5],G=1:9,modelNames="EEE")
plot(r_e_c1,what="density", col=4, points.col="grey")
r_e_c2 = densityMclust(phoneme[Class=='Oral',1:5],G=1:9,modelNames="EEE")
plot(r_e_c2,what="density", col=4, points.col="grey")
r_v_c1 = densityMclust(phoneme[Class=='Nasal',1:5],G=1:9,modelNames="VVV")
plot(r_v_c1,what="density",col=2, points.col="grey")
r_v_c2 = densityMclust(phoneme[Class=='Oral',1:5],G=1:9,modelNames="VVV")
plot(r_v_c2,what="density",col=2, points.col="grey")
p1 <- mean(Class=='Nasal')
p2 <- 1-p1
f_1 <- predict(r_e_c1,phoneme[,1:5])
f_2 <- predict(r_e_c2,phoneme[,1:5])
p<- f_1*p1/(f_1*p1+f_2*p2)
p <- (p<0.5)+1
mean(p==as.numeric(Class))
p1 <- mean(Class=='Nasal')
p2 <- 1-p1
f_1 <- predict(r_v_c1,phoneme[,1:5])
f_2 <- predict(r_v_c2,phoneme[,1:5])
a<- f_1*p1/(f_1*p1+f_2*p2)
b<-f_2*p2/(f_1*p1+f_2*p2)
p <- (a<0.5)+1
mean(p==as.numeric(Class))
phoneme2 <- phoneme
phoneme2[,1:5] <- scale(phoneme[,1:5])
r0 = kmeans(phoneme2[,-6], centers=2)
phoneme2
phoneme2$cluster <- r0$cluster
phoneme2
phoneme2$cluster <- r0$cluster
phoneme2 <- phoneme2[sort(phoneme2$cluster),]
pairs(phoneme2[,1:5], col=phoneme2$cluster+1, pch=phoneme2$cluster+1,main="K = 2 (Original Data)")
pairs(phoneme2[,1:5], col=phoneme2$cluster+1, pch=phoneme2$cluster+1,main="K = 2 (Original Data)")
phoneme2
pairs(phoneme2[,1:5])
pairs(phoneme2[,1:5]
)
phoneme2 <- phoneme
phoneme2[,1:5] <- scale(phoneme[,1:5])
r0 = kmeans(phoneme2[,-6], centers=2)
pairs(phoneme2[,1:5], col=phoneme2$cluster+1, pch=phoneme2$cluster+1,main="K = 2 (Original Data)")
pairs(phoneme2[,1:5], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
pairs(phoneme2[,1:5], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
View(phoneme2)
ari = double(8)
for(k in 2:9) {
r = kmeans(new2[,1:5], centers=k)
ari[k-1] = adjustedRandIndex(new2$Class, r$cluster)
}
ari
ari = double(8)
for(k in 2:9) {
r = kmeans(phoneme2[,1:5], centers=k)
ari[k-1] = adjustedRandIndex(phoneme2$Class, r$cluster)
}
ari
(r = densityMclust(phoneme[,1:5], G=2, modelNames="VVV"))
r$classification
table(r$classification)
classification <- r$classification%%2 +1
pairs(phoneme2[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
pairs(phoneme2[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
classification
names(classification)
names(classification) <- 1:length(classification)
classification
phoneme <- phoneme[order(classification),]
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
phoneme <- phoneme[-order(classification),]
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
phoneme <- phoneme[-order(classification),]
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Origi
)
phoneme <- phoneme[-order(classification),]
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
phoneme
knitr::opts_chunk$set(echo = TRUE)
phoneme = read.csv("phoneme.csv", stringsAsFactors=TRUE)
library(mclust)
with(phoneme, pairs(phoneme[,-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
phoneme <- phoneme[order(phoneme$Class),]
with(phoneme, pairs(phoneme[order(Class),-6], col=c(2,4)[Class], pch=c(1,3)[Class]))
attach(phoneme)
hist(V1, freq=FALSE, breaks=100,
col="gray80", border="white",
main="Denstiy Estimation", xlab="V1")
methods <-c("nrd0", "ucv", "bcv", "SJ")
for(bw in methods) {
lines(density(V1, bw=bw), col=match(bw,methods)+10, lwd=2)
}
cols <- which(methods==methods) +10
legend("topright",legend = methods,col = cols,lwd=2)
(r = densityMclust(V1, G=1:20))
plot.Mclust(r,"BIC")
r2 = densityMclust(V1, G=6,modelNames="V")
x = seq(min(V1), max(V1), len=500)
plot(r2, V1, "density", breaks=100, lwd=2, col=4)
r_e_c1 = densityMclust(phoneme[Class=='Nasal',1:5],G=1:9,modelNames="EEE")
plot(r_e_c1,what="density", col=4, points.col="grey")
r_e_c2 = densityMclust(phoneme[Class=='Oral',1:5],G=1:9,modelNames="EEE")
plot(r_e_c2,what="density", col=4, points.col="grey")
r_v_c1 = densityMclust(phoneme[Class=='Nasal',1:5],G=1:9,modelNames="VVV")
plot(r_v_c1,what="density",col=2, points.col="grey")
r_v_c2 = densityMclust(phoneme[Class=='Oral',1:5],G=1:9,modelNames="VVV")
plot(r_v_c2,what="density",col=2, points.col="grey")
p1 <- mean(Class=='Nasal')
p2 <- 1-p1
f_1 <- predict(r_e_c1,phoneme[,1:5])
f_2 <- predict(r_e_c2,phoneme[,1:5])
p<- f_1*p1/(f_1*p1+f_2*p2)
p <- (p<0.5)+1
mean(p==as.numeric(Class))
p1 <- mean(Class=='Nasal')
p2 <- 1-p1
f_1 <- predict(r_v_c1,phoneme[,1:5])
f_2 <- predict(r_v_c2,phoneme[,1:5])
a<- f_1*p1/(f_1*p1+f_2*p2)
b<-f_2*p2/(f_1*p1+f_2*p2)
p <- (a<0.5)+1
mean(p==as.numeric(Class))
phoneme2 <- phoneme
phoneme2[,1:5] <- scale(phoneme[,1:5])
r0 = kmeans(phoneme2[,-6], centers=2)
names(r0$cluster) <- 1:length(r0$cluster)
phoneme2<- phoneme2[order(r0$cluster)]
names(r0$cluster) <- 1:length(r0$cluster)
phoneme2<- phoneme2[order(r0$cluster),]
pairs(phoneme2[,1:5], col=r0$cluster+1, pch=r0$cluster+1,main="K = 2 (Original Data)")
View(phoneme)
ari = double(8)
for(k in 2:9) {
r = kmeans(phoneme2[,1:5], centers=k)
ari[k-1] = adjustedRandIndex(phoneme2$Class, r$cluster)
}
ari
phoneme2$Class
classification
table(classification)
(r = densityMclust(phoneme[,1:5], G=2, modelNames="VVV"))
table(classification)
table(r$classification)
classification <- r$classification%%2 +1
classification
names(classification) <- 1:length(classification)
phoneme <- phoneme[order(classification),]
pairs(phoneme[,1:5], col=classification+1, pch=classification+1,main="K = 2 (Original Data)")
ari = double(8)
# we should reverse the class level as 2-clusters does.
for(g in 2:9) {
r = densityMclust(phoneme[,1:5], G=g, modelNames="VVV")
ari[k-1] = adjustedRandIndex(phoneme$Class, r$cluster)
}
phoneme$Class
r = densityMclust(phoneme[,1:5], G=g, modelNames="VVV")
r
r$classification
r$classification
table(r$classification)
ari = double(8)
# we should reverse the class level as 2-clusters does.
for(g in 2:9) {
r = densityMclust(phoneme[,1:5], G=g, modelNames="VVV")
ari[k-1] = adjustedRandIndex(phoneme$Class, r$classification)
}
ari
table(r$classification)
r = densityMclust(phoneme[,1:5], G=2, modelNames="VVV")
r$classification
table(r$classification)
class(phoneme$Class)
table(phoneme$Class)
adjustedRandIndex(phoneme$Class, r$classification)
ari = double(8)
# we should reverse the class level as 2-clusters does.
for(g in 2:9) {
r = densityMclust(phoneme[,1:5], G=g, modelNames="VVV")
ari[k-1] = adjustedRandIndex(phoneme$Class, r$classification)
}
ari
dist(phoneme2)
dist(phoneme2[,-6])
?dist
d <- dist(phoneme2[,-6])
r = hclust(d)
view(d)
View(d)
d
d$size
d[['size']]
d
names(r)
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
cex
cex=1
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
cex=0.5
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
cex=0.1
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
cex=3
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
cex=1
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
plot(r, cex.axis=cex, cex.lab=cex, cex.main=cex)
cex=1
plot(r, cex.axis=2, cex.lab=cex, cex.main=cex)
plot(r, cex.axis=2, cex.lab=cex, cex.main=cex)
cex=1
plot(r, cex.axis=1, cex.lab=cex, cex.main=cex)
cex=1
plot(r, cex.axis=1, cex.lab=cex, cex.main=cex)
r = hclust(d,method = 'single')
plot(r, cex.axis=1, cex.lab=cex, cex.main=cex)
plot(r, cex.axis=1, cex.lab=cex, cex.main=cex)
hclust()
?hclust()
for(c in 2:9) {
r = hclust(d)
cluster <- cutree(r, c)
ari[k-1] = adjustedRandIndex(phoneme$Class, cluster)
}
ari = double(8)
for(c in 2:9) {
r = hclust(d)
cluster <- cutree(r, c)
ari[k-1] = adjustedRandIndex(phoneme$Class, cluster)
}
ari
cluster <- cutree(r, 2)
cluster
as.numeric(phoneme$Class)==cluster
mean(as.numeric(phoneme$Class)==cluster)
ari = double(8)
for(c in 2:9) {
r = hclust(d,'single')
cluster <- cutree(r, c)
ari[k-1] = adjustedRandIndex(phoneme$Class, cluster)
}
ari
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust,
margins=c(15,5))
?heatmap
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust(method='single'),
margins=c(15,5))
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust,
margins=c(15,5),add.expr =list(method='single') )
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust,
margins=c(15,5),add.expr =list(method='complete') )
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust,
margins=c(15,5),add.expr =list(method='now') )
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust,
margins=c(15,5),add.expr =list(method='now') )
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun = function(x) hclust(x,method = 'single'),
margins=c(15,5),add.expr =list(method='now') )
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun=hclust,
margins=c(15,5),add.expr =list(method='now') ,main = 'Heatmap for complete method')
heatmap(as.matrix(phoneme[,-6]), scale="column", distfun=dist, hclustfun = function(x) hclust(x,method = 'single'),
margins=c(15,5),add.expr =list(method='now'),main = 'Heatmap for complete method')
?hclust
60162 + 3343+3342 -3
a = 60161
b=3342
c=3341
sum = a+b+c
a/sum
b/sum
quit
quit()
knitr::opts_chunk$set(echo = TRUE)
countsDT <- data.table::fread("/course/NZTA/20130101_20130331_TMSTrafficQuarterHour.csv")
setwd("~/canvas/stats769/lab1")
library(data.table)
data.table('lab01.csv')
table <- data.table('lab01.csv')
table
?data.table
table <- data.table::fread('lab01.csv')
View(table)
?read.csv
read.csv()
read.csv
C_readtablehead
?.External
setwd("~/canvas/stats769/exam")
path <- readLines("path.txt")
x <- numeric()
y <- numeric()
path
strsplit(path," ")
text <- strsplit(path," ")
text<-
text
text
text[1]
text[2]
text[3]
text <- unlist(text)
text
match(text)
1:length(text)%2==1
(1:length(text)%2)==1
(1:length(text)/2)==1
(1:length(text)$/$2)==1
(1:length(text)%/%2)==1
1:length(text)
1:length(text) %/% 2
1:length(text) // 2
1:length(text) %//% 2
1:length(text) / 2
1:length(text) %% 2
text <- 1:length(text) %% 2==1
text
text <- 1:length(text) %% 2==0
text
text <- strsplit(path," ")
text <- unlist(text)
ind <- 1:length(text) %% 2==0
text[ind]
label <- text[ind]
pos <- text[ind]
strplit(pos,",")
strsplit(pos,",")
pos <-nlist(strsplit(pos,","))
pos <-unlist(strsplit(pos,","))
pos
y <- c(x,as.numeric(pos[ind]))
x <- c(x,as.numeric(pos[!ind]))
y
x
